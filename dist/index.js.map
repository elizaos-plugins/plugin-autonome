{"version":3,"sources":["../src/actions/launchAgent.ts","../src/index.ts"],"sourcesContent":["import axios from \"axios\";\nimport {\n    ActionExample,\n    composeContext,\n    Content,\n    elizaLogger,\n    generateObjectDeprecated,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n} from \"@elizaos/core\";\n\nexport interface LaunchAgentContent extends Content {\n    name: string;\n    config: string;\n}\n\nfunction isLaunchAgentContent(content: any): content is LaunchAgentContent {\n    elizaLogger.log(\"Content for launchAgent\", content);\n    return typeof content.name === \"string\" && typeof content.config === \"string\";\n}\n\nconst launchTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"name\": \"xiaohuo\",\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested agent launch:\n- Agent name\n- Character json config\n`;\n\nexport default {\n    name: \"LAUNCH_AGENT\",\n    similes: [\"CREATE_AGENT\", \"DEPLOY_AGENT\", \"DEPLOY_ELIZA\", \"DEPLOY_BOT\"],\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n        return true;\n    },\n    description: \"Launch an Eliza agent\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting LAUNCH_AGENT handler...\");\n        // Initialize or update state\n        if (!state) {\n            state = (await runtime.composeState(message)) as State;\n        } else {\n            state = await runtime.updateRecentMessageState(state);\n        }\n\n        // Compose launch context\n        const launchContext = composeContext({\n            state,\n            template: launchTemplate,\n        });\n\n        // Generate launch content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: launchContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        // Validate launch content\n        if (!isLaunchAgentContent(content)) {\n            elizaLogger.error(\"Invalid launch content\", content);\n            if (callback) {\n                callback({\n                    text: \"Unable to process launch agent request. Invalid content provided.\",\n                    content: { error: \"Invalid launch agent content\" },\n                });\n            }\n            return false;\n        }\n\n        const autonomeJwt = runtime.getSetting(\"AUTONOME_JWT_TOKEN\");\n        const autonomeRpc = runtime.getSetting(\"AUTONOME_RPC\");\n\n        const requestBody = {\n            name: content.name,\n            config: content.config,\n            creationMethod: 2,\n            envList: {},\n            templateId: \"Eliza\",\n        };\n\n        const sendPostRequest = async () => {\n            try {\n                const response = await axios.post(autonomeRpc, requestBody, {\n                    headers: {\n                        Authorization: `Bearer ${autonomeJwt}`,\n                        \"Content-Type\": \"application/json\",\n                    },\n                });\n                return response;\n            } catch (error) {\n                console.error(\"Error making RPC call:\", error);\n            }\n        };\n\n        try {\n            const resp = await sendPostRequest();\n            if (resp && resp.data && resp.data.app && resp.data.app.id) {\n                elizaLogger.log(\n                    \"Launching successful, please find your agent on\"\n                );\n                elizaLogger.log(\n                    \"https://dev.autonome.fun/autonome/\" +\n                        resp.data.app.id +\n                        \"/details\"\n                );\n            }\n            if (callback) {\n                callback({\n                    text: `Successfully launch agent ${content.name}`,\n                    content: {\n                        success: true,\n                        appId:\n                            \"https://dev.autonome.fun/autonome/\" +\n                            resp.data.app.id +\n                            \"/details\",\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            if (callback) {\n                elizaLogger.error(\"Error during launching agent\");\n                elizaLogger.error(error);\n                callback({\n                    text: `Error launching agent: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Launch an agent, name is xiaohuo\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll launch the agent now...\",\n                    action: \"LAUNCH_AGENT\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully launch agent, id is ba2e8369-e256-4a0d-9f90-9c64e306dc9f\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} satisfies Action;\n\n","import { Plugin } from \"@elizaos/core\";\nimport launchAgent from \"./actions/launchAgent\";\n\nexport const autonomePlugin: Plugin = {\n    name: \"autonome\",\n    description: \"Autonome Plugin for Eliza\",\n    actions: [launchAgent],\n    evaluators: [],\n    providers: [],\n};\n\nexport default autonomePlugin;\n"],"mappings":"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","names":[]}